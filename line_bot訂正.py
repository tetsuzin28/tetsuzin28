# -*- coding: utf-8 -*-
"""line_bot

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oKYfcEgu3G809mtWbTV2s1zqgMA3WTON
"""









from flask import Flask, request, abort 
from linebot import LineBotApi, WebhookHandler 
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage 
import pya3rt 

import requests

app = Flask('__name__') #Flaskクラスのインスタンス作成

#lineBotApiのインスタンス作成
line_bot_api= LineBotApi('FhX4JAs4lmpyZDa91DbULEVMKdCGZq/FO9zyZXvROxV0I1ZvieQ7wJO/UfU6Zot7IZW\
xkrAaNTaKhRHTn4oFQ8uDaZahjft2k45kY/4C/ONsC5MJfzJimAxsI8VoEaIFsbZ63NEG0gZVJqpyDdtQGQdB04t89/1O/w1cDnyilFU=')  #引数はチャンネルアクセストークン

handler=WebhookHandler('32969b674fa0cb3df7dca78da82d0df3')   #WebhookHandlerは送られてきたメッセージを扱うクラス　　インスタンス作成　　引数はチャンネルシークレット

@app.route("/callback",methods=['POST'])#「/callback」にアクセスが来た時に呼び出す
def callback():  #リクエストがLINE Platformから送られてきたか確認するためSignature(サイン)を検証する必要がある
    signature = request.headers["X-Line-Signature"]
    body = request.get_data(as_text=True)
#Webhookとはイベントが送られてきたときにイベントを処理するサーバイベント
    try:
        handler.handle(body,signature)  #例外が発生するかもしれないが、実行する処理＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
    except invalidSignatureError:
        abort(400)#例外発生時に行う処理

    return 'OK'

@handler.add(MessageEvent,message=TextMessage) #WebhookHandlerに送られてきたイベントを処理する関数を追加　一つ目の引数はイベントの処理、二つ目の引数はメッセージの種類
def handle_message(event):#追加する関数
  ai_message=talk_ai(event.message.text) #aiの返答を格納　　event.message.textはLINEから送られてきたメッセージが格納
  line_bot_api.reply_message(event.reply_token,TextSendMessage(text=ai_message))
  #line_bot_api.reply_message(event.reply_token,TextSendMessage(text='谷重元信'))
  #↑LINEをメッセージとして返すためにreply_message関数を使う、一つ目の引数はどのイベントに対して返信するか識別するため、二つ目は返すメッセージ
  

def talk_ai(word):#aiに入れる言葉

  query_word = word
  files = {
      'apikey': (None, 'DZZ1hjpiPfnUu9Vwlu3RvJ2Q88JL32yT'),
      'query': (None, query_word.encode('utf-8')),
  }

  response = requests.post('https://api.a3rt.recruit.co.jp/talk/v1/smalltalk', files=files)
          #pythonでは{}で囲まれた要素を「辞書型」で扱う　　
  #辞書型にはkeyとvalueがあり　左がkeyで右がvalueとなる
 
  #print(response.json()['results'][0]['reply'])   　#結果を出力

  return response.json()['results'][0]['reply']  #aiの返答を返す

if __name__ == '__main__':       #__name__という変数は実行したときは__main__が代入される　ほかのプログラムからインポートされたときはモジュールの名前が代入
    app.run()#アプリをローカルサーバーで実行する

